{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "pivotalTags": {
      "type": "object",
      "defaultValue": {
        "provider": "E44900E0-9770-4D2A-8225-DFB0735FB6F6"
      },
      "metadata": {
        "description": "Provider tags"
      }
    },
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "Cluster name will be used as prefix for most resources created for this cluster and must be unique within your account"
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Username to use for SSH access to the virtual machines"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Which authentication type to use when connecting to the virtual machines: Password or SSH Public Key"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password to use for SSH access to the virtual machines"
      }
    },
    "sshPublicKey": {
      "type": "securestring",
	  "defaultValue": "",
      "metadata": {
        "description": "Public key for passwordless SSH access to the virtual machines"
      }
    },
    "allowedInboundIPAddressCIDR": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Optionally restrict inbound connections to a source ip address range specified with a CIDR block"
      }
    },
    "gemfireDatanodeCount": {
      "type": "int",
      "allowedValues": [
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "metadata": {
        "description": "The number of datanodesto provision in the GemFire cluster"
      }
    },
    "gemfireOnAzureProjectTag": {
      "type": "string",
      "defaultValue" : "master",
      "metadata": {
        "description": "The version of the GemFire on Azure project to use for this deployments.  The default value, 'master' points to the latest release"
      }
    }
  },
  "variables": {
    "apiVersions": {
      "resources": {
        "deployments": "2016-09-01"
      },
      "storage": {
        "storageAccounts": "2016-05-01"
      },
      "network": {
        "virtualNetworks": "2016-09-01",
        "networkInterfaces": "2016-09-01",
        "loadBalancers": "2016-09-01",
        "publicIPAddresses": "2016-09-01",
        "networkSecurityGroups": "2016-09-01"
      },
      "compute": {
        "availabilitySets": "2016-04-30-preview",
        "virtualMachines": "2016-04-30-preview",
        "virtualMachineExtensions": "2016-04-30-preview",
        "disks": "2016-04-30-preview"
      }
    },
    "faultdomainCountMap": {
      "eastus": {
        "maximumPlatformFaultDomainCount": 3
      },
      "eastus2": {
        "maximumPlatformFaultDomainCount": 3
      },
      "westus": {
        "maximumPlatformFaultDomainCount": 3
      },
      "centralus": {
        "maximumPlatformFaultDomainCount": 3
      },
      "northcentralus": {
        "maximumPlatformFaultDomainCount": 3
      },
      "southcentralus": {
        "maximumPlatformFaultDomainCount": 3
      },
      "northeurope": {
        "maximumPlatformFaultDomainCount": 3
      },
      "westeurope": {
        "maximumPlatformFaultDomainCount": 3
      },
      "eastasia": {
        "maximumPlatformFaultDomainCount": 3
      },
      "southeastasia": {
        "maximumPlatformFaultDomainCount": 2
      },
      "japaneast": {
        "maximumPlatformFaultDomainCount": 2
      },
      "japanwest": {
        "maximumPlatformFaultDomainCount": 2
      },
      "australiaeast": {
        "maximumPlatformFaultDomainCount": 2
      },
      "australiasoutheast": {
        "maximumPlatformFaultDomainCount": 2
      },
      "brazilsouth": {
        "maximumPlatformFaultDomainCount": 2
      },
      "southindia": {
        "maximumPlatformFaultDomainCount": 2
      },
      "centralindia": {
        "maximumPlatformFaultDomainCount": 2
      },
      "canadacentral": {
        "maximumPlatformFaultDomainCount": 2
      },
      "canadaeast": {
        "maximumPlatformFaultDomainCount": 2
      },
      "westus2": {
        "maximumPlatformFaultDomainCount": 2
      },
      "westcentralus": {
        "maximumPlatformFaultDomainCount": 2
      },
      "uksouth": {
        "maximumPlatformFaultDomainCount": 2
      },
      "ukwest": {
        "maximumPlatformFaultDomainCount": 2
      },
      "koreacentral": {
        "maximumPlatformFaultDomainCount": 2
      },
      "koreasouth": {
        "maximumPlatformFaultDomainCount": 2
      },
      "eastus2euap": {
        "maximumPlatformFaultDomainCount": 2
      },
      "centraluseuap": {
        "maximumPlatformFaultDomainCount": 1
      }
    },
    "gfAvailabilitySetSettings": {
      "name": "[concat(parameters('clusterName'),'-avs')]",
      "faultDomainCount": "[variables('faultdomainCountMap')[tolower(replace(resourceGroup().location,' ',''))].maximumPlatformFaultDomainCount]",
      "updateDomainCount": "5",
      "managed": true
    },
    "storageAccountType" : "Premium_LRS",
    "networkInterfaceName" : "gemfiredatafabric-nic",
    "virtualNetworkName" : "gemfiredatafabric-vnet",
    "virtualNetworkAddressSpace" : "10.0.0.0/16",
    "subnetAddressSpace" : "10.0.1.0/24",
    "subnetStartAddress" : "10.0.1.4",
    "subnetName" : "gemfiredatafabric-subnet",
    "publicIpAddressName" : "gemfiredatafabric-publicip",
    "gemfireOnAzureProjectTag" : "develop",
    "datanodeVmSize": "Standard_D12s_v2",
    "gemfireHostCount" : "[ add(2, parameters('gemfireDatanodeCount')) ]",
    "gemfireDatanodeCount" : "[ parameters('gemfireDatanodeCount') ]",
    "gemfireLocatorCount" : 2,
    "dataDiskCount" : 1,
    "dataDiskSizeGB" : 512,
    "gfNodeName": "[concat(parameters('clusterName'), '-server') ]",
    "gfstorageAccountName": "[concat(parameters('clusterName'), 'stgact')]",
    "gfvnetRef": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')) ]",
    "gfsubnetRef": "[concat(variables('gfvnetRef'),'/subnets/', variables('subnetName')) ]",
    "gfSecurityGroupName": "[concat(parameters('clusterName'),'-nsg')]",
    "s1": "[split(variables('subnetStartAddress'),'.')]",
    "linuxConfiguration_sshPublicKey": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          },
    "linuxConfiguration_password": {},
    "linuxConfiguration": "[variables(concat('linuxConfiguration_',parameters('authenticationType')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[ concat( variables('gfstorageAccountName'), copyIndex() )]",
      "apiVersion": "[variables('apiVersions').storage.storageAccounts]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "storageAccountLoop",
        "count": "[variables('gemfireHostCount')]"
      },
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      },
      "tags": {
        "provider": "[toUpper(parameters('pivotalTags').provider)]"
      },
      "properties": {}
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkSecurityGroups]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('gfSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('pivotalTags').provider)]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('allowedInboundIPAddressCIDR')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "locator-rule",
            "properties": {
              "description": "Allow inbound connection to locator",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "10334",
              "sourceAddressPrefix": "[parameters('allowedInboundIPAddressCIDR')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "cache-server-rule",
            "properties": {
              "description": "Allow inbound connection to cache servers",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "40404",
              "sourceAddressPrefix": "[parameters('allowedInboundIPAddressCIDR')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "jmx-manager-rule",
            "properties": {
              "description": "Allow inbound connection to the JMX Manager",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "1099",
              "sourceAddressPrefix": "[parameters('allowedInboundIPAddressCIDR')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "http-rule",
            "properties": {
              "description": "Allow inbound connection to Pulse and REST API on 7070",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "7070",
              "sourceAddressPrefix": "[parameters('allowedInboundIPAddressCIDR')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 104,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[ variables('virtualNetworkName')]",
      "apiVersion": "[variables('apiVersions').network.virtualNetworks]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('gfSecurityGroupName'))]"
      ],
      "tags": {
        "Name": "Pivotal Gemfire",
        "provider": "[toUpper(parameters('pivotalTags').provider)]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[ variables('virtualNetworkAddressSpace') ]"
          ]
        },
        "subnets": [
          {
            "name": "[ variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressSpace')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('gfSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[ concat( variables('publicIpAddressName'), copyIndex() ) ]",
      "apiVersion": "[variables('apiVersions').network.publicIPAddresses]",
      "location": "[ resourceGroup().location ]",
      "copy": {
        "name": "pubIpLoop",
        "count": "[variables('gemfireHostCount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[ toLower(concat(variables('gfNodeName'), copyIndex(),'-', replace(subscription().displayName, ' ','') ) )]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('networkInterfaceName'), copyIndex())]",
      "apiVersion": "[variables('apiVersions').network.networkInterfaces]",
      "location": "[ resourceGroup().location ]",
      "dependsOn": [
        "[concat ('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "copy": {
        "name": "gfNodesNicsCopy",
        "count": "[variables('gemfireHostCount')]"
      },
      "tags": {
        "provider": "[toUpper(parameters('pivotalTags').provider)]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "[ concat( 'ipconfig-', copyIndex() ) ]",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[ concat(variables('s1')[0],'.',variables('s1')[1],'.',variables('s1')[2],'.', string( add (int(variables('s1')[3]), copyIndex()) ) )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIpAddressName'), copyIndex() ) )]"
              },
              "subnet": {
                "id": "[variables('gfsubnetRef')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('gfSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('gfNodeName'), copyIndex(), '-withpassword')]",
      "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'), copyIndex())]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('gfstorageAccountName'), copyIndex())]"
      ],
      "condition": "[equals(parameters('authenticationType'),'password')]",
      "copy": {
        "name": "gfNodeNicLoop",
        "count": "[variables('gemfireHostCount')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('datanodeVmSize') ]"
        },
        "osProfile": {
          "computerName": "[concat(variables('gfNodeName'), copyIndex())]",
          "adminUsername": "[parameters('adminUserName')]",
		      "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
	  	},
		"storageProfile": {
		          "imageReference": {
		            "publisher": "OpenLogic",
		            "offer": "CentOS",
		            "sku": "7.3",
		            "version": "latest"
		          },
		          "osDisk": {
		            "name": "[concat(variables('gfNodeName'), copyIndex(), '-osdisk')]",
		            "caching": "ReadWrite",
		            "createOption": "FromImage",
		            "managedDisk": {
		              "storageAccountType": "[variables('storageAccountType')]"
		            }
		          },
		          "copy": [
		            {
		              "name": "dataDisks",
		              "count": "[variables('dataDiskCount')]",
		              "input": {
		                "caching": "None",
		                "diskSizeGB": "[variables('dataDiskSizeGB')]",
		                "lun": "[copyIndex('dataDisks')]",
		                "name": "[concat(variables('gfNodeName'), copyIndex(), '-datadisk',copyIndex('dataDisks'))]",
		                "managedDisk": {
		                  "storageAccountType": "[variables('storageAccountType')]"
		                },
		                "createOption": "Empty"
		              }
		            }
		          ]
		        },
		        "networkProfile": {
		          "networkInterfaces": [
		            {
		              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('networkInterfaceName'), copyIndex()))]"
		            }
		          ]
		        }
		      }
		    },
        {
          "type": "Microsoft.Compute/virtualMachines",
          "name": "[concat(variables('gfNodeName'), copyIndex(),'-withsshkey')]",
          "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'), copyIndex())]",
            "[concat('Microsoft.Storage/storageAccounts/', variables('gfstorageAccountName'), copyIndex())]"
          ],
          "condition": "[equals(parameters('authenticationType'),'sshPublicKey')]",
          "copy": {
            "name": "gfNodeNicLoop",
            "count": "[variables('gemfireHostCount')]"
          },
          "properties": {
            "hardwareProfile": {
              "vmSize": "[variables('datanodeVmSize') ]"
            },
            "osProfile": {
              "computerName": "[concat(variables('gfNodeName'), copyIndex())]",
              "adminUsername": "[parameters('adminUserName')]",
              "linuxConfiguration": "[variables('linuxConfiguration')]"
    	  	},
    		"storageProfile": {
    		          "imageReference": {
    		            "publisher": "OpenLogic",
    		            "offer": "CentOS",
    		            "sku": "7.3",
    		            "version": "latest"
    		          },
    		          "osDisk": {
    		            "name": "[concat(variables('gfNodeName'), copyIndex(), '-osdisk')]",
    		            "caching": "ReadWrite",
    		            "createOption": "FromImage",
    		            "managedDisk": {
    		              "storageAccountType": "[variables('storageAccountType')]"
    		            }
    		          },
    		          "copy": [
    		            {
    		              "name": "dataDisks",
    		              "count": "[variables('dataDiskCount')]",
    		              "input": {
    		                "caching": "None",
    		                "diskSizeGB": "[variables('dataDiskSizeGB')]",
    		                "lun": "[copyIndex('dataDisks')]",
    		                "name": "[concat(variables('gfNodeName'), copyIndex(), '-datadisk',copyIndex('dataDisks'))]",
    		                "managedDisk": {
    		                  "storageAccountType": "[variables('storageAccountType')]"
    		                },
    		                "createOption": "Empty"
    		              }
    		            }
    		          ]
    		        },
    		        "networkProfile": {
    		          "networkInterfaces": [
    		            {
    		              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('networkInterfaceName'), copyIndex()))]"
    		            }
    		          ]
    		        }
    		      }
    		    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('gfNodeName'), copyIndex(), '-withsshkey','/initGemfireVMs')]",
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "condition": "[equals(parameters('authenticationType'),'sshPublicKey')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "gfNodeNicLoop",
        "count": "[variables('gemfireHostCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('gfNodeName'), copyIndex(),'-withsshkey')]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/Pivotal-Data-Engineering/gemfire-azure/',parameters('azureGemFireVersion'),'/init_scripts/bootstrap.py')]"
          ],
          "commandToExecute": "[concat('python bootstrap.py --git-branch ',parameters('gemfireOnAzureProjectTag'), ' --environment GEMFIRE_USER=', parameters('adminUserName'), ' REGION_NAME=', resourceGroup().location, ' LOCATOR_COUNT=', variables('gemfireLocatorCount'), ' DATANODE_COUNT=', variables('gemfireDatanodeCount'), ' AZ_SUBSCRIPTION=', replace(subscription().displayName,' ',''),' CLUSTER_NAME=', parameters('clusterName'), ' STARTING_PRIVATE_IP=',variables('s1')[3], ' PRIVATE_IP_PREFIX=', variables('s1')[0],'.',variables('s1')[1],'.',variables('s1')[2],'.')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('gfNodeName'), copyIndex(), '-withpassword','/initGemfireVMs')]",
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "condition": "[equals(parameters('authenticationType'),'password')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "gfNodeNicLoop",
        "count": "[variables('gemfireHostCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('gfNodeName'), copyIndex(),'-withpassword')]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/Pivotal-Data-Engineering/gemfire-azure/',parameters('azureGemFireVersion'),'/init_scripts/bootstrap.py')]"
          ],
          "commandToExecute": "[concat('python bootstrap.py --git-branch ',parameters('gemfireOnAzureProjectTag'), ' --environment GEMFIRE_USER=', parameters('adminUserName'), ' REGION_NAME=', resourceGroup().location, ' LOCATOR_COUNT=', variables('gemfireLocatorCount'), ' DATANODE_COUNT=', variables('gemfireDatanodeCount'), ' AZ_SUBSCRIPTION=', replace(subscription().displayName,' ',''),' CLUSTER_NAME=', parameters('clusterName'), ' STARTING_PRIVATE_IP=',variables('s1')[3], ' PRIVATE_IP_PREFIX=', variables('s1')[0],'.',variables('s1')[1],'.',variables('s1')[2],'.')]"
        }
      }
    }
  ],
  "outputs": {}
}
